{"version":3,"file":"static/js/841.64a5f816.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRF,EAAAA,GAAAA,IAAA,sCAAyCC,IADjC,cACzBE,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qDAKjBC,EAAY,mCAAG,WAAMC,GAAN,uFACHP,EAAAA,GAAAA,IAAA,gCACIC,EADJ,iCACoCM,IAFjC,cACpBJ,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,sDAOZG,EAAgB,mCAAG,WAAMC,GAAN,uFACPT,EAAAA,GAAAA,IAAA,iBACXS,EADW,oBACQR,EADR,oBADO,cACxBE,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBM,EAAa,mCAAG,WAAMD,GAAN,uFACJT,EAAAA,GAAAA,IAAA,iBACXS,EADW,4BACgBR,EADhB,oBADI,cACrBE,EADqB,yBAIpBA,EAASC,KAAKO,MAJM,2CAAH,sDAObC,EAAgB,mCAAG,WAAMH,GAAN,uFACPT,EAAAA,GAAAA,IAAA,iBACXS,EADW,4BACgBR,EADhB,oBADO,cACxBE,EADwB,yBAIvBA,EAASC,KAAKC,SAJS,2CAAH,qD,2HCwH7B,UA3IsB,WAAO,IAAD,IAC1B,GAA8BQ,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQN,GAAYO,EAAAA,EAAAA,MAAZP,QACFQ,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BP,EAAAA,EAAAA,UAAS,QAArC,eAAOQ,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAKd,oGAEID,EAAU,WAFd,UAGyBd,EAAAA,EAAAA,IAAiBC,GAH1C,UAI0B,KADhBe,EAHV,QAIeC,OAJf,yCAKaC,QAAQC,OACb,IAAIC,MAAJ,iCACAC,OAAM,SAAAC,GACNR,EAAU,WACX,KATP,OAWMA,EAAU,YACVP,EAAWS,GAZjB,0DAeIF,EAAU,QAfd,2DALc,sBACE,OAAZb,GADU,mCAuBdsB,EACD,GAAE,CAACtB,EAASY,IAEb,IAAMW,EAAY,oBAAGf,EAASgB,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE7C,OACE,gCACc,YAAXb,IAAwB,SAAC,IAAD,IACb,SAAXA,GACC,+BACE,uFAIF,GAEU,aAAXA,GACC,4BACE,SAAC,KAAD,CAAMc,GAAIH,EAAV,4BACA,4BACE,gBACEI,IAAG,0CAAqCtB,EAAQuB,aAChDC,IAAKxB,EAAQyB,MACbC,MAAM,MACNC,OAAO,SAET,wBAAK3B,EAAQyB,SACb,wCAAgBzB,EAAQ4B,aAAxB,QACA,sCACA,uBAAI5B,EAAQ6B,YACZ,oCACA,uBAAI7B,EAAQ8B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,UAE9B,4BACE,oDACA,2BACE,mBACEC,KAAK,SACLC,QAAS,WAAO,IAAD,EACb9B,EAAS,OAAQ,CAAEc,MAAO,CAAEC,KAAI,UAAEjB,EAASgB,aAAX,aAAE,EAAgBC,OACnD,EAJH,mBAQA,mBACEc,KAAK,SACLC,QAAS,WAAO,IAAD,EACb9B,EAAS,UAAW,CAClBc,MAAO,CAAEC,KAAI,UAAEjB,EAASgB,aAAX,aAAE,EAAgBC,OAElC,EANH,4BAYJ,SAAC,KAAD,OAGF,KAgDP,C","sources":["components/Services/API.js","pages/MoviesDetails/MoviesDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2f727d9c78f10445dbb338c23170004d';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}`\n  );\n  return response.data.results;\n};\n\nexport const getMoviesDetails = async movieID => {\n  const response = await axios.get(\n    `/movie/${movieID}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMoviesCast = async movieID => {\n  const response = await axios.get(\n    `/movie/${movieID}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getMoviesReviews = async movieID => {\n  const response = await axios.get(\n    `/movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n","import { getMoviesDetails } from '../../components/Services/API';\nimport { useState, useEffect } from 'react';\nimport {\n  useParams,\n  useLocation,\n  useNavigate,\n  Link,\n  Outlet,\n} from 'react-router-dom';\n\nimport LoadingComponent from '../../components/Loader/Loader';\n\nconst MoviesDetails = () => {\n  const [details, setDetails] = useState(null);\n  const { movieID } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    if (movieID === null) {\n      return;\n    }\n    // .then(setDetails);\n    async function fetchMovies() {\n      try {\n        setStatus('pending');\n        const movies = await getMoviesDetails(movieID);\n        if (movies.length === 0) {\n          return Promise.reject(\n            new Error(`Sorry, we didn't infortmaion`)\n          ).catch(error => {\n            setStatus('rejected');\n          });\n        } else {\n          setStatus('resolved');\n          setDetails(movies);\n        }\n      } catch {\n        setStatus('idle');\n      }\n    }\n    fetchMovies();\n  }, [movieID, status]);\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  return (\n    <>\n      {status === 'pending' && <LoadingComponent />}\n      {status === 'idle' ? (\n        <>\n          <div>{`Hello! We are going to our backend to make magic`} </div>\n          {/* <LoadingComponent /> */}\n        </>\n      ) : (\n        ''\n      )}\n      {status === 'resolved' ? (\n        <div>\n          <Link to={backLinkHref}>&#11013;Go Back</Link>\n          <div>\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${details.poster_path}`}\n              alt={details.title}\n              width=\"300\"\n              height=\"450\"\n            />\n            <h1>{details.title}</h1>\n            <p>User Score: {details.vote_average}%</p>\n            <h2>Overview</h2>\n            <p>{details.overview}</p>\n            <h2>Genres</h2>\n            <p>{details.genres.map(genre => genre.name)}</p>\n          </div>\n          <div>\n            <h2>Additional Information</h2>\n            <ul>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  navigate(`cast`, { state: { from: location.state?.from } });\n                }}\n              >\n                Cast\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  navigate(`reviews`, {\n                    state: { from: location.state?.from },\n                  });\n                }}\n              >\n                Reviews\n              </button>\n            </ul>\n          </div>\n          <Outlet />\n        </div>\n      ) : (\n        ''\n      )}\n\n      {/* {details ? (\n        <div>\n          <div>\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${details.poster_path}`}\n              alt={details.title}\n              width=\"300\"\n              height=\"450\"\n            />\n            <h1>{details.title}</h1>\n            <p>User Score: {details.vote_average}%</p>\n            <h2>Overview</h2>\n            <p>{details.overview}</p>\n            <h2>Genres</h2>\n            <p>{details.genres.map(genre => genre.name)}</p>\n          </div>\n          <div>\n            <h2>Additional Information</h2>\n            <ul>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  navigate(`cast`, { state: { from: location.state?.from } });\n                }}\n              >\n                Cast\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  navigate(`reviews`, {\n                    state: { from: location.state?.from },\n                  });\n                }}\n              >\n                Reviews\n              </button>\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <LoadingComponent />\n      )} */}\n    </>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","searchMovies","query","getMoviesDetails","movieID","getMoviesCast","cast","getMoviesReviews","useState","details","setDetails","useParams","location","useLocation","navigate","useNavigate","status","setStatus","useEffect","movies","length","Promise","reject","Error","catch","error","fetchMovies","backLinkHref","state","from","to","src","poster_path","alt","title","width","height","vote_average","overview","genres","map","genre","name","type","onClick"],"sourceRoot":""}